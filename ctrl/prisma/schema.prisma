// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "./../.prisma/generated"
  engineType = "client"
  // binaryTargets = ["native", "debian-openssl-3.0.x","rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime @db.Timestamptz(3)
  updatedAt     DateTime @db.Timestamptz(3)
  sessions      Session[]
  accounts      Account[]

  passkeys Passkey[]
  tunnels Tunnels[]


  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @db.Timestamptz(3)
  updatedAt DateTime @db.Timestamptz(3)
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime? @db.Timestamptz(3)
  refreshTokenExpiresAt DateTime? @db.Timestamptz(3)
  scope                 String?
  password              String?
  createdAt             DateTime @db.Timestamptz(3)
  updatedAt             DateTime @db.Timestamptz(3)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @db.Timestamptz(3)
  updatedAt  DateTime? @db.Timestamptz(3)

  @@map("verification")
}




model RateLimit {
  id          String  @id
  key         String?
  count       Int?
  lastRequest BigInt?

  @@map("rateLimit")
}




model AuditLog {
  id String @id @default(cuid())

  createdAt      DateTime @db.Timestamptz(3)    @default(now())
  type           String
  message        String
  organizationId String
  email          String

  @@map("audit_logs")
}


model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime? @db.Timestamptz(3)
  aaguid       String?

  @@map("passkey")
}



model Tunnels {
  id        String   @id @default(nanoid(8))
  userId    String
  name      String
  apiKey    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  

  @@unique([userId, name])


  @@map("tunnels")
}

